using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SAMLValidation
{
    class Validate
    {
        static void Main(string[] args)
        {
            var samlToken = "";

            string appDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string filePath = appDirectory + System.Configuration.ConfigurationManager.AppSettings["MetaCertificateFile"];

            AuthorizeToken token = new AuthorizeToken(samlToken, filePath);
            try
            {
                if (!token.isValid())
                {
                    Console.WriteLine("Invalid Token, SAML Validation Failed");
                    //throw new UnauthorizedAccessException("Invalid Token, SAML Validation Failed");
                }
                else
                {
                    var userName = token.UserName;
                    var tokenExpiry = token.ValidTo;

                    Console.WriteLine("User is: " + userName + " and Token expires at: " + tokenExpiry);
                }
                    
            }
            catch (SecurityTokenExpiredException)
            {
                Console.WriteLine("Security token Expired");
                //throw new UnauthorizedAccessException("Security Token Expired");
            }
            catch (Exception ex) 
            {
                Console.WriteLine("Invalid Token, Exception occured: " + ex.Message);
                //throw new UnauthorizedAccessException(ex.Message); 
            }

            Console.ReadLine();
        }
    }
}
