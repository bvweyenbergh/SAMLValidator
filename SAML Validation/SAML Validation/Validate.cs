using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SAMLValidation
{
    class Validate
    {
        static void Main(string[] args)
        {
            //base64 encoding of saml token 26/09
            var samlToken = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48QXNzZXJ0aW9uIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoxLjA6YXNzZXJ0aW9uIiB4bWxuczpTT0FQLUVOVj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIEFzc2VydGlvbklEPSJfYmE2OTIxZWEzZWM2MmVlNDZiNjcyODE4MGM4OTNkM2EiIElzc3VlSW5zdGFudD0iMjAyMi0wOS0yNlQxNDo0ODowNC45OThaIiBJc3N1ZXI9InVybjpiZTpmZ292OmVoZWFsdGg6c3RzOjFfMCIgTWFqb3JWZXJzaW9uPSIxIiBNaW5vclZlcnNpb249IjEiPjxDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAyMi0wOS0yNlQxNDo0MzowNC4wOTZaIiBOb3RPbk9yQWZ0ZXI9IjIwMjItMDktMjdUMTQ6NDg6MDQuMDk2WiIvPjxBdXRoZW50aWNhdGlvblN0YXRlbWVudCBBdXRoZW50aWNhdGlvbkluc3RhbnQ9IjIwMjItMDktMjZUMTQ6NDg6MDQuOTk4WiIgQXV0aGVudGljYXRpb25NZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMDphbTpYNTA5LVBLSSI+PFN1YmplY3Q+PE5hbWVJZGVudGlmaWVyIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6WDUwOVN1YmplY3ROYW1lIiBOYW1lUXVhbGlmaWVyPSJDTj1URVNULVpldGVzQ29uZmlkZW5zLWVIZWFsdGggYWNjZXB0YW5jZSB0ZXN0LWlzc3VpbmcgQ0EgMDAxLCBTRVJJQUxOVU1CRVI9MDAxLCBPPVpFVEVTIFNBLCBDPUJFIj5DTj0iU1NJTj02NjA2MTgxMjU4NCIsIE9VPWVIZWFsdGgtcGxhdGZvcm0gQmVsZ2l1bSwgT1U9UEhJTElQUEUgUVVFUlRFTU9OVCwgT1U9IlNTSU49NjYwNjE4MTI1ODQiLCBPPUZlZGVyYWwgR292ZXJubWVudCwgQz1CRTwvTmFtZUlkZW50aWZpZXI+PFN1YmplY3RDb25maXJtYXRpb24+PENvbmZpcm1hdGlvbk1ldGhvZD51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoxLjA6Y206aG9sZGVyLW9mLWtleTwvQ29uZmlybWF0aW9uTWV0aG9kPjxkczpLZXlJbmZvIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6WDUwOURhdGE+PGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlHbERDQ0JIeWdBd0lCQWdJSVlISUJ4c3U5K3RFd0RRWUpLb1pJaHZjTkFRRUxCUUF3Y3pFTE1Ba0dBMVVFQmhNQ1FrVXhFVEFQCkJnTlZCQW9NQ0ZwRlZFVlRJRk5CTVF3d0NnWURWUVFGRXdNd01ERXhRekJCQmdOVkJBTU1PbFJGVTFRdFdtVjBaWE5EYjI1bWFXUmwKYm5NdFpVaGxZV3gwYUNCaFkyTmxjSFJoYm1ObElIUmxjM1F0YVhOemRXbHVaeUJEUVNBd01ERXdIaGNOTWpJd01qRTRNVEl3T0RRNApXaGNOTWpNd01qRTVNVEl3T0RRNFdqQ0JvVEVMTUFrR0ExVUVCaE1DUWtVeEd6QVpCZ05WQkFvTUVrWmxaR1Z5WVd3Z1IyOTJaWEp1CmJXVnVkREVaTUJjR0ExVUVDd3dRVTFOSlRqMDJOakEyTVRneE1qVTROREVjTUJvR0ExVUVDd3dUVUVoSlRFbFFVRVVnVVZWRlVsUkYKVFU5T1ZERWhNQjhHQTFVRUN3d1laVWhsWVd4MGFDMXdiR0YwWm05eWJTQkNaV3huYVhWdE1Sa3dGd1lEVlFRRERCQlRVMGxPUFRZMgpNRFl4T0RFeU5UZzBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXAxN2R4L0F1clN4aEZkbjlnWG9JCnltUEFTMy9RUU1KZlF4akFNTmluSnp0Qm5UY3k5Y0ZRNzRPYktseENxWGZSRE1hQWxmNDMxOExsc01GMmVmVUQyWHpVcXo4dGJ3cVgKNStRR29zZ1ZpV1NKTHFQOUc4OGNFNGY5YXRmdzFtUDJOTFBKTU1XYWJXSlArQU1sbTdXeWNsRVRDWC9YSW5WOThvcUMyNHloc0hmSgp6d0FHeE02RUVzeEJQcGM1c05BY3QweEVhQU0zQXpzak1GVnVpYjlldW4zWVJ2VXl5VnByb0NiSFl0MzJ1SXc2RlR0MmNTbmFsZzNXCnhCU2V0bVUzWWNYY2FNSW8rY0xzREZGK0R1Rk90TkJmN0RzOUF6QUYxT0VPQmpFaGNZS2F5Z2xFckVFenBCMGdML01iZHZaa2xyZGkKV2FBWGlsNjVESGpSUjVvby9RSURBUUFCbzRJQit6Q0NBZmN3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlFnNit5NQpkQzJhSVdkZW41dmgxL1VESkFiK0FEQTdCZ2dyQmdFRkJRY0JBUVF2TUMwd0t3WUlLd1lCQlFVSE1BR0dIMmgwZEhBNkx5OWxhR0ZqCll5NTBjM0F1ZW1WMFpYTXVZMjl0TDI5amMzQXdnZndHQTFVZElBU0I5RENCOFRDQjdnWVBpRGNHQVFRQmd2Um1BZ0VDQWdNVE1JSGEKTURFR0NDc0dBUVVGQndJQkZpVm9kSFJ3T2k4dlpXaGhZMk11ZEhOd0xucGxkR1Z6TG1OdmJTOXlaWEJ2YzJsMGIzSjVNSUdrQmdncgpCZ0VGQlFjQ0FqQ0JseDZCbEFCVUFHZ0FhUUJ6QUNBQWFRQnpBQ0FBWVFBZ0FIUUFaUUJ6QUhRQUlBQmpBR1VBY2dCMEFHa0FaZ0JwCkFHTUFZUUIwQUdVQUxnQWdBRWtBZEFBZ0FITUFhQUJ2QUhVQWJBQmtBQ0FBYmdCdkFIUUFJQUJpQUdVQUlBQjFBSE1BWlFCa0FDQUEKWmdCdkFISUFJQUJ2QUhBQVpRQnlBR0VBZEFCcEFHOEFiZ0JoQUd3QUlBQndBSFVBY2dCd0FHOEFjd0JsQUhNd0hRWURWUjBsQkJZdwpGQVlJS3dZQkJRVUhBd0lHQ0NzR0FRVUZCd01FTUR3R0ExVWRId1ExTURNd01hQXZvQzJHSzJoMGRIQTZMeTlsYUdGall5NTBjM0F1CmVtVjBaWE11WTI5dEwzcGpjSFJ3YTJsemRXSmpZUzVqY213d0hRWURWUjBPQkJZRUZGN204V0d3aFg1dmY3eENXR1pab0d6a1Z0UnYKTUE0R0ExVWREd0VCL3dRRUF3SUY0REFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBU1lxMjNiRnU1elZMOGUwQ2U2UHA4cCtJTkxuZgo2V1NjbkdlVENjUWlhbEVZdnFYczdSRDJibDRVbGNWNmw0TTgvcVd0a1QvaW1icVJHSzlGV1lEVW53Zm12RjNRQ1U2aDd3ZjJwdnFhCnBLKzFTNm9aSUxTck5sZE5YbWtaNkRralVqWGNxUlJNVlZlWWVMODlYWGFCdnhkVnlDRXo1VjY2Q2ZQZ2N4NGNzdWNPdE1VUFltSnQKcDE2TXF6eWZrQmkvWXgzVUs0WTRlOW01UjNZb2xuODJCeHVvU1JkcitLOW5OVEJUZ2lSRnZWQ3pkcmFpSW84RkMxVTg0cG4yVm5wcApDQ21yRU1zV2tFdVI1cy9PRCtHZHlBNEJJRDVmeTZjeDlqd3BNck1kaWtPYWRRdm91ODVFOWJPSm9TZ0FLZnNQSkxiWGZuMFhFMm01CmY2Qk9WUzJjVGVsT0k4eEJFN1YxRzc2NlBldXpRL2pZVWlSSlcvQVduL3cxZ1VUbW1TYkVuV0JQWkZDSXZCM1NtTTN1c0RZYk13WVYKUHFJWk1NSFdnTkhnVmRqaFY3elBRQkI5anJRamNJeG9FdVBva3ozM2JYdmdYUm9wdmxFMEhzOWJaVlg1eEVEQjZKdTF6UEczRERPagprcWNiWklpZWdVc3NrMjNIaFAxRGsrTFhIazJlbzdvNTFrMGFaOXJoL3hKRFUzQlU2aCtKa2xMRW9HMHI2dFRmU1JQT0wvNXFxOGtuCkJ0QklRMkpWZmRrM3loTkNWMHdKMFlyaWYzYit0VC9PYThQRTJIeHlqTElaSUJiMDBxVlI1SE9CNmJUOHlLRnZFdXlSUWdJclZXcGgKcmhjc2ltSzZYWXRodm16WVVTMFZQR2NpT2c1Q244MjRmQ3lHdlBEbENLeVlnUU09PC9kczpYNTA5Q2VydGlmaWNhdGU+PC9kczpYNTA5RGF0YT48L2RzOktleUluZm8+PC9TdWJqZWN0Q29uZmlybWF0aW9uPjwvU3ViamVjdD48L0F1dGhlbnRpY2F0aW9uU3RhdGVtZW50PjxBdHRyaWJ1dGVTdGF0ZW1lbnQ+PFN1YmplY3Q+PE5hbWVJZGVudGlmaWVyIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6WDUwOVN1YmplY3ROYW1lIiBOYW1lUXVhbGlmaWVyPSJDTj1URVNULVpldGVzQ29uZmlkZW5zLWVIZWFsdGggYWNjZXB0YW5jZSB0ZXN0LWlzc3VpbmcgQ0EgMDAxLCBTRVJJQUxOVU1CRVI9MDAxLCBPPVpFVEVTIFNBLCBDPUJFIj5DTj0iU1NJTj02NjA2MTgxMjU4NCIsIE9VPWVIZWFsdGgtcGxhdGZvcm0gQmVsZ2l1bSwgT1U9UEhJTElQUEUgUVVFUlRFTU9OVCwgT1U9IlNTSU49NjYwNjE4MTI1ODQiLCBPPUZlZGVyYWwgR292ZXJubWVudCwgQz1CRTwvTmFtZUlkZW50aWZpZXI+PC9TdWJqZWN0PjxBdHRyaWJ1dGUgQXR0cmlidXRlTmFtZT0idXJuOmJlOmZnb3Y6ZWhlYWx0aDoxLjA6Y2VydGlmaWNhdGVob2xkZXI6cGVyc29uOnNzaW4iIEF0dHJpYnV0ZU5hbWVzcGFjZT0idXJuOmJlOmZnb3Y6aWRlbnRpZmljYXRpb24tbmFtZXNwYWNlIj48QXR0cmlidXRlVmFsdWU+NjYwNjE4MTI1ODQ8L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgQXR0cmlidXRlTmFtZT0idXJuOmJlOmZnb3Y6cGVyc29uOnNzaW4iIEF0dHJpYnV0ZU5hbWVzcGFjZT0idXJuOmJlOmZnb3Y6aWRlbnRpZmljYXRpb24tbmFtZXNwYWNlIj48QXR0cmlidXRlVmFsdWU+NjYwNjE4MTI1ODQ8L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgQXR0cmlidXRlTmFtZT0idXJuOmJlOmZnb3Y6cGVyc29uOnNzaW46ZG9jdG9yOmJvb2xlYW4iIEF0dHJpYnV0ZU5hbWVzcGFjZT0idXJuOmJlOmZnb3Y6Y2VydGlmaWVkLW5hbWVzcGFjZTplaGVhbHRoIj48QXR0cmlidXRlVmFsdWU+dHJ1ZTwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBBdHRyaWJ1dGVOYW1lPSJ1cm46YmU6ZmdvdjpwZXJzb246c3NpbjplaGVhbHRoOjEuMDpkb2N0b3I6bmloaWkxMSIgQXR0cmlidXRlTmFtZXNwYWNlPSJ1cm46YmU6ZmdvdjpjZXJ0aWZpZWQtbmFtZXNwYWNlOmVoZWFsdGgiPjxBdHRyaWJ1dGVWYWx1ZT4xMDU5NjI1OTAwNDwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBBdHRyaWJ1dGVOYW1lPSJ1cm46YmU6ZmdvdjpwZXJzb246c3NpbjplaGVhbHRoOjEuMDpmcHNwaDpkb2N0b3I6Ym9vbGVhbiIgQXR0cmlidXRlTmFtZXNwYWNlPSJ1cm46YmU6ZmdvdjpjZXJ0aWZpZWQtbmFtZXNwYWNlOmVoZWFsdGgiPjxBdHRyaWJ1dGVWYWx1ZT50cnVlPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48L0F0dHJpYnV0ZVN0YXRlbWVudD48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI19iYTY5MjFlYTNlYzYyZWU0NmI2NzI4MTgwYzg5M2QzYSI+PGRzOlRyYW5zZm9ybXM+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48ZHM6RGlnZXN0VmFsdWU+RVAxV3FoU1NuWXN4MVFvWHVSL1l2TjdVWUpZPTwvZHM6RGlnZXN0VmFsdWU+PC9kczpSZWZlcmVuY2U+PC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5WVlFGOVFvYUtNc0ZYS3JTZW5vZmFUdnBrZzVJUXE0YkpHT201UXBOaFhVaVRjbDkvU1pBVy91WFBqTHhEeXQvTmJlSk5vOThzSHFESzlrRjA2a2phOXM3MUVxR0Q1QVIyOFhQYW1LM045R0RQbktsYlg4VXdUSEJqZnlPYzZDQkVIK0tFai9VdmxrSk5pYlNwRUNWSWpoaU9zdUdxaW5CMGhsNU5LSHduSDAxYWhjcmQrRlJkRnFVVHErZUNNK1ZjMGFGd3N2VTd1KzlISmdiM1Jsb1hPeVBuUGRrQjZTdkRjN0FxSlJpVTRkNERrSFAwUVF6b3Qzb3BZTkVNS0FXTjJHTEFFTXFuQk9CZ3l1YkZva2VaUEQzWlZPTzBZNWV5TE1ENWxSaDVDcTh6RUFTajQ3RzNzVEp3ZUM4TzV5ZE82ZksvOUNXdUdVb2VQb3RUZW83Snc9PTwvZHM6U2lnbmF0dXJlVmFsdWU+PGRzOktleUluZm8+PGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU+TUlJRnZqQ0NBNmFnQXdJQkFnSUllL1Mzek4yUlVTZ3dEUVlKS29aSWh2Y05BUUVMQlFBd2NqRUxNQWtHQTFVRUJoTUNRa1V4RVRBUApCZ05WQkFvTUNGcEZWRVZUSUZOQk1Rd3dDZ1lEVlFRRkV3TXdNREV4UWpCQUJnTlZCQU1NT1ZwbGRHVnpRMjl1Wm1sa1pXNXpJRkJ5CmFYWmhkR1VnVkhKMWMzUWdVRXRKSUMwZ1pVaGxZV3gwYUNCcGMzTjFhVzVuSUVOQklEQXdNVEFlRncweU1UQXhNVEV4TURReE5UWmEKRncweU5EQXhNVEl4TURReE5UWmFNSUd6TVFzd0NRWURWUVFHRXdKQ1JURWJNQmtHQTFVRUNnd1NSbVZrWlhKaGJDQkhiM1psY201dApaVzUwTVE4d0RRWURWUVFMREFaSlFVMUJRME14RnpBVkJnTlZCQXNNRGtOQ1JUMHdPREE1TXprME5ESTNNUmt3RndZRFZRUUxEQkJGClNFVkJURlJJTFZCTVFWUkdUMUpOTVNFd0h3WURWUVFMREJobFNHVmhiSFJvTFhCc1lYUm1iM0p0SUVKbGJHZHBkVzB4SHpBZEJnTlYKQkFNTUZrTkNSVDB3T0RBNU16azBOREkzTENCSlFVMUJRME13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQgpBUUNjTVpqa3hEaE9wakRlU1pLSWkxbG95TUNJakFxY0NMalpuUFB6Z3BXcWsxd2FLYWRXeWVuNlZ3UC9TQ1BIQnFPRmdxU09Ba0ZhCmpEK3Fna0RIREZPbUF0M28rbDg1RmZnU0d4aENSbGFrZS9PTFVwSWVPSmpBSFRDcWhFaGFZTWZ5bm4xYlM4eEo3RFFad2hmdG82T0MKblliMHc4MVFyblNhZDVldlBUSER6OXREZ3h6T0IrcmpCR3ZZY2VUTi9sSjJHK01IUWJGYXB0anBQRzB0SXdTZUlwdVdXdXlzU3licgo2Y3FIZitSTFhDRGg2dDA5dXByNzBIc0JueklCY2kyQUY5SGhSYThQOFRiOG5mOVJmamViMnJBbXB3NjZrakZlRVZBQ3BlaElqWXM4Cnp5NG5EVnp3N083Rlo3T3g5Tm5IMEZoSGlQaEg0YjZUM09qem5MUFhBZ01CQUFHamdnRVVNSUlCRURCRUJnZ3JCZ0VGQlFjQkFRUTQKTURZd05BWUlLd1lCQlFVSE1BR0dLR2gwZEhBNkx5OXZZM053TFdWb0xYQjBjR3RwTG1OdmJtWnBaR1Z1Y3k1NlpYUmxjeTVqYjIwdwpIUVlEVlIwT0JCWUVGRDFmRXF3ajBRMkRvdUU2bTBRNXBmVmlHaDNyTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVCkszR3ZWalBSM1RQbklSMUxJUkdzbTdjS0R4a3dTd1lEVlIwZkJFUXdRakJBb0Q2Z1BJWTZhSFIwY0RvdkwyTnliQzFsYUMxd2RIQnIKYVM1amIyNW1hV1JsYm5NdWVtVjBaWE11WTI5dEwxcERSVWhRVkZCTFNVTkJNREF4TG1OeWJEQU9CZ05WSFE4QkFmOEVCQU1DQmVBdwpIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0lHQ0NzR0FRVUZCd01FTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFCV04vZmQ3ak5uCjZjMXVweGtGczRibTRQOU1pWjR2WFdIeDdSSVBQTVVKczR5SUNnWTlkRzVnbjhhMjNhc0JaWWlEUXY0MVNtck11WVNZbk9weEdzZm0KWGdDaWRoUDRQNGMyWTh3YVMwWVRIb21jdjNwREtzVit0TlFYMjdTVjZITmZ4SElUS3BrUE91QmlxdnJLaE1PR2VrUW1zRGgxQzBWYQpMbnp4bmxCRklnTkVjc2VFd2E3ejlFYlRGWnpZQmN2Z0FKTTB3YVIrdk5BTVM1eldta2h3NGhxU1l2azQrSUhKZlpkbFljRENCbThqCjk3ZENzWm5QRWZHZjFINUltT2ptaEdFQ0JSdXpTTEkvV0k1eWgzdlEvNS9qd0dXM2w5ZDdKMFRQNG5TMEJiYTF0RWN3ME9PODRWcnIKRFhZS212ZG5zYUhVd0M3SlppbFkyRTFVdXhNdVk4dElrV3RUYklLSXRFcEFONFpNWWk4WkwrTHI0YnlxeEVQMkQwT0tzbEtvWjByLwp1SzFPT0kzNDAvK0ZkMUt6Y2RCQ1BTRTJIZHk1amgyZmg0OC84QW56ekpHeFRpYmZkWHdhVWVJamtTVmRDcVJWK0N3MGNGRnA2dWIzCnFYTU1raVA0WU9sOFdPbm1lTGJCOGZFTU1TUFA5TEVSWVRQRTNqS0ZsL3lLUFBFMjhySHo5T0NrcUNrWGRqWDN1cGpqV1VVdDFPOUoKMklqWDZWWlZxQ0R6OENhYjhGTGZuWFBIMi9LOGFiRUFNZTJpOUlvcUgxbVh3cVhMV2hDcnRDNlRFVG5yZzN4SU9EN25keUJiUi9kNQpjTjZjSjRrb1Z2U0FORTNycFd6QjEwaktVRVUrUDdWWHhDdzBRSXhqTWxZWDhsWWxjNzFKWDhienlXZGM5T0laSXc9PTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE+PC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjwvQXNzZXJ0aW9uPg==";

            string appDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string filePath = appDirectory + System.Configuration.ConfigurationManager.AppSettings["MetaCertificateFile"];

            AuthorizeToken token = new AuthorizeToken(samlToken, filePath);
            try
            {
                if (!token.isValid())
                {
                    Console.WriteLine("Invalid Token, SAML Validation Failed");
                    throw new UnauthorizedAccessException("Invalid Token, SAML Validation Failed");
                }
                else
                {
                    var userName = token.UserName;
                    var tokenExpiry = token.ValidTo;

                    Console.WriteLine("User is: " + userName + " and Token expires at: " + tokenExpiry);
                }
                    
            }
            catch (SecurityTokenExpiredException)
            {
                Console.WriteLine("Security token Expired");
                throw new UnauthorizedAccessException("Security Token Expired");
            }
            catch (Exception ex) 
            {
                Console.WriteLine("Invalid Token, Exception occured: " + ex.Message);
                throw new UnauthorizedAccessException(ex.Message); 
            }

            Console.ReadLine();
        }
    }
}
